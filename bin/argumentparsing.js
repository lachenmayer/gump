// Generated by CoffeeScript 1.7.1
(function() {
  var gulp, gulpSrcForArgs,
    __slice = [].slice;

  gulp = require('gulp');

  gulpSrcForArgs = function(args) {
    var opts, potentialOpts, srcs, _ref;
    srcs = [];
    while (args.length > 0 && typeof args[0] === 'string') {
      srcs.push(args[0]);
      args = args.slice(1);
    }
    if (args.length > 0) {
      potentialOpts = args[0];
      if (potentialOpts && ((_ref = typeof potentialOpts) !== 'function' && _ref !== 'string')) {
        opts = potentialOpts;
        args = args.slice(1);
      }
    }
    return [
      (function() {
        return gulp.src(srcs, opts);
      }), srcs, args
    ];
  };

  exports.parseArguments = function(_arg) {
    var args, callback, deps, dest, lastArg, name, pipes, potentialDeps, src, srcs, _i, _ref;
    name = _arg[0], args = 3 <= _arg.length ? __slice.call(_arg, 1, _i = _arg.length - 1) : (_i = 1, []), lastArg = _arg[_i++];
    if (args.length > 0) {
      potentialDeps = args[0];
      if (Array.isArray(potentialDeps)) {
        deps = potentialDeps;
        args = args.slice(1);
      }
    }
    if (!lastArg || typeof lastArg === 'string') {
      dest = lastArg;
      if (args.length < 1) {
        reportMissingSource(name);
      }
      src = args[0];
      if (typeof src === 'function') {
        pipes = args.slice(1);
      } else {
        _ref = gulpSrcForArgs(args), src = _ref[0], srcs = _ref[1], pipes = _ref[2];
      }
    } else {
      callback = lastArg;
    }
    return {
      name: name,
      deps: deps,
      callback: callback,
      src: src,
      srcs: srcs,
      pipes: pipes,
      dest: dest
    };
  };

}).call(this);
